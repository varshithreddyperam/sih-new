"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/runCode";
exports.ids = ["pages/api/runCode"];
exports.modules = {

/***/ "node-fetch":
/*!*****************************!*\
  !*** external "node-fetch" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("node-fetch");

/***/ }),

/***/ "(api)/./pages/api/runCode.js":
/*!******************************!*\
  !*** ./pages/api/runCode.js ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node-fetch */ \"node-fetch\");\n\nconst JUDGE0_API_BASE_URL = \"https://judge0-ce.p.rapidapi.com\";\nconst languageMap = {\n    javascript: 63,\n    python: 71,\n    python3: 71,\n    java: 62,\n    c: 50,\n    cpp: 54,\n    ruby: 72,\n    go: 60\n};\nconst RAPIDAPI_HOST = \"judge0-ce.p.rapidapi.com\";\nconst RAPIDAPI_KEY = \"91d8d6e654mshacc1c9b8e36c96fp1f5dbcjsn22273515f012\";\nasync function checkRapidApiKey() {\n    return true; // No API key needed for public Judge0 API\n}\nfunction sleep(ms) {\n    return new Promise((resolve)=>setTimeout(resolve, ms));\n}\nasync function handler(req, res) {\n    if (req.method === \"GET\") {\n        // Handle GET request to fetch supported languages\n        try {\n            const response = await node_fetch__WEBPACK_IMPORTED_MODULE_0__(`${JUDGE0_API_BASE_URL}/languages`, {\n                method: \"GET\",\n                headers: {\n                    \"x-rapidapi-host\": RAPIDAPI_HOST,\n                    \"x-rapidapi-key\": RAPIDAPI_KEY,\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error(\"Judge0 API getLanguages error:\", errorText);\n                res.status(500).json({\n                    error: \"Failed to fetch languages\"\n                });\n                return;\n            }\n            const languages = await response.json();\n            res.status(200).json(languages);\n        } catch (error) {\n            console.error(\"Error fetching languages:\", error);\n            res.status(500).json({\n                error: error.message\n            });\n        }\n        return;\n    }\n    if (req.method !== \"POST\") {\n        res.status(405).json({\n            error: \"Method not allowed\"\n        });\n        return;\n    }\n    const { code , language  } = req.body;\n    if (!code || !language) {\n        res.status(400).json({\n            error: \"Code and language are required\"\n        });\n        return;\n    }\n    const languageId = languageMap[language.toLowerCase()];\n    if (!languageId) {\n        res.status(400).json({\n            error: \"Language not supported\"\n        });\n        return;\n    }\n    try {\n        console.log(\"Submitting code to Judge0 API:\", {\n            code,\n            languageId\n        });\n        // Submit code with wait=true for synchronous execution\n        const submitResponse = await node_fetch__WEBPACK_IMPORTED_MODULE_0__(`${JUDGE0_API_BASE_URL}/submissions?base64_encoded=false&wait=true`, {\n            method: \"POST\",\n            headers: {\n                \"x-rapidapi-host\": RAPIDAPI_HOST,\n                \"x-rapidapi-key\": RAPIDAPI_KEY,\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                source_code: code,\n                language_id: languageId,\n                stdin: \"\"\n            })\n        });\n        if (!submitResponse.ok) {\n            const errorText = await submitResponse.text();\n            console.error(`Judge0 API submission error: Status ${submitResponse.status} - ${errorText}`);\n            res.status(500).json({\n                output: `Judge0 API submission error: Status ${submitResponse.status} - ${errorText}`\n            });\n            return;\n        }\n        const result = await submitResponse.json();\n        console.log(\"Judge0 API execution result:\", JSON.stringify(result, null, 2));\n        let output = \"\";\n        if (result.stdout) {\n            output = result.stdout;\n        } else if (result.compile_output) {\n            output = result.compile_output;\n        } else if (result.stderr) {\n            output = result.stderr;\n        } else if (result.message) {\n            output = result.message;\n        } else {\n            output = \"No output received from Judge0 API\";\n        }\n        // Ensure output is a string before sending response\n        if (typeof output !== \"string\") {\n            output = JSON.stringify(output);\n        }\n        res.status(200).json({\n            output\n        });\n    } catch (error) {\n        console.error(\"Error in runCode API:\", error);\n        res.status(500).json({\n            output: \"Error: \" + error.message\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/runCode.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/runCode.js"));
module.exports = __webpack_exports__;

})();